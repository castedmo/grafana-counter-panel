{"version":3,"sources":["../src/ctrl.js"],"names":["getColorForValue","data","value","i","thresholds","length","colorMap","_","first","MetricsPanelCtrl","$","kbn","config","TimeSeries","panelDefaults","fontSizes","fontTypes","unitFormats","getUnitFormats","operatorNameOptions","valueMaps","op","text","mappingTypes","name","rangeMaps","from","to","mappingType","colors","decimals","format","operatorName","digitColor","backColor","CounterPanelCtrl","$scope","$injector","alertSrv","defaults","panel","scoperef","alertSrvRef","initialized","panelContainer","panelWidth","panelHeight","valueFormatted","valueRounded","series","statCounter","FlipClock","elem","clockFace","countdown","statChangeInterval","events","on","onInitEditMode","bind","onRender","onDataReceived","onDataError","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","container","tmpPanelWidth","clientWidth","getPanelHeight","actualWidth","tmpPanelHeight","ctrl","height","row","replace","actualHeight","parseInt","setValues","parentElem","find","css","children","angular","element","setTime","size","datapoints","dataPoints","lastFullBucket","timeDiff","last","rate","Math","floor","clearInterval","sc","setInterval","increment","map","index","indexOf","splice","render","push","rangeMap","scope","attrs","$panelContainer","setContainer","isNumber","scaledDecimals","delta","dec","log","LN10","magn","pow","norm","result","max","flotpairs","error","Error","message","JSON","stringify","lastPoint","lastValue","isArray","alias","isString","escape","stats","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","roundValue","scopedVars","__name","label","parseFloat","j","subItem","err","dataList","seriesHandler","seriesData","target","getFlotPairs","nullPointMode","tmp","templateUrl"],"mappings":"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","file":"ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport './css/counter.css!';\nimport './external/flipclock.css!';\nimport './external/flipclock.min.js';\n\nconst panelDefaults = {\n  fontSizes: [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70],\n  fontTypes: [\n    'Arial', 'Avant Garde', 'Bookman',\n    'Consolas', 'Courier', 'Courier New',\n    'Garamond', 'Helvetica', 'Open Sans',\n    'Palatino', 'Times', 'Times New Roman',\n    'Verdana'\n  ],\n  unitFormats: kbn.getUnitFormats(),\n  operatorNameOptions: ['min', 'max', 'avg', 'current', 'total', 'name'],\n  valueMaps: [\n    { value: 'null', op: '=', text: 'N/A' }\n  ],\n  mappingTypes: [\n    { name: 'value to text', value: 1 },\n    { name: 'range to text', value: 2 },\n  ],\n  rangeMaps: [\n    { from: 'null', to: 'null', text: 'N/A' }\n  ],\n  mappingType: 1,\n  thresholds: '',\n  colors: [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n  decimals: 2, // decimal precision\n  format: 'none', // unit format\n  operatorName: 'total', // operator applied to time series\n  digitColor: \"#ccc\",\n  backColor: \"rgb(147, 238, 132)\",\n};\n\nclass CounterPanelCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, alertSrv) {\n    super($scope, $injector);\n    // merge existing settings with our defaults\n    _.defaults(this.panel, panelDefaults);\n    this.scoperef = $scope;\n    this.alertSrvRef = alertSrv;\n    this.initialized = false;\n    this.panelContainer = null;\n    this.panelWidth = null;\n    this.panelHeight = null;\n    this.data = {\n      value: 0,\n      valueFormatted: 0,\n      valueRounded: 0\n    };\n    this.series = [];\n    this.statCounter = new FlipClock(this.elem, 0, {\n      clockFace: 'Counter',\n      countdown: true\n    });\n    this.statChangeInterval = null;\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n  }\n\n  onInitEditMode() {\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    var thisPanelPath = thisPanel.baseUrl + '/';\n    //var optionsPath = thisPanelPath + 'partials/editor.options.html';\n    //this.addEditorTab('Options', optionsPath, 2);\n  }\n\n  /**\n   * [setContainer description]\n   * @param {[type]} container [description]\n   */\n  setContainer(container) {\n    this.panelContainer = container;\n  }\n\n  getPanelWidth() {\n    // with a full sized panel, this comes back as zero, so calculate from the div panel instead\n    //debugger;\n    var tmpPanelWidth = this.panelContainer[0].clientWidth;\n    if (tmpPanelWidth === 0) {\n      // just use the height...\n      tmpPanelWidth = this.getPanelHeight();\n      tmpPanelWidth -= 24;\n      if (tmpPanelWidth < 250) {\n        tmpPanelWidth = 250;\n      }\n      return tmpPanelWidth;\n      //var tmpPanelWidthCSS = $(\"div.panel\").css(\"width\");\n      //var tmpPanelWidthPx = tmpPanelWidthCSS.replace(\"px\",\"\");\n      //tmpPanelWidth = parseInt(tmpPanelWidthPx);\n    }\n    var actualWidth = tmpPanelWidth;\n    return actualWidth;\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height via options\n    var tmpPanelHeight = this.$scope.ctrl.panel.height;\n    // if that is blank, try to get it from our row\n    if (typeof tmpPanelHeight === 'undefined') {\n      // get from the row instead\n      tmpPanelHeight = this.row.height;\n      // default to 250px if that was undefined also\n      if (typeof tmpPanelHeight === 'undefined') {\n        tmpPanelHeight = 250;\n      }\n    }\n    else {\n      // convert to numeric value\n      tmpPanelHeight = tmpPanelHeight.replace(\"px\", \"\");\n    }\n    var actualHeight = parseInt(tmpPanelHeight);\n    // grafana minimum height for a panel is 250px\n    if (actualHeight < 250) {\n      actualHeight = 250;\n    }\n    return actualHeight;\n  }\n\n  /*changeColor(){\n    this.elem.find('.inn').css('background-color', this.panel.backColor + \"!important\");\n  }*/\n\n  onRender() {\n    this.setValues(this.data);\n\n    if (typeof this.data.value !== 'undefined') {\n      this.parentElem.find('.grafana-stat-counter-value-container').css('height', this.height + 'px');\n      if ($('.grafana-stat-counter-value').children().length === 0) {\n        this.statCounter = angular.element('.grafana-stat-counter-value').FlipClock(this.data.value, {\n          clockFace: 'Counter',\n          countdown: true\n        });\n      }\n      else\n        this.statCounter.setTime(this.data.value);\n\n      if (typeof this.series[0] !== 'undefined' && _.size(this.series[0].datapoints) > 1) {\n        var dataPoints = this.series[0].datapoints;\n        var lastFullBucket = dataPoints[dataPoints.length-2];\n        var timeDiff = _.last(dataPoints)[1] -  lastFullBucket[1];\n        var rate = Math.floor(timeDiff / lastFullBucket[0]);\n        //console.log(\"rate: \" + rate);\n        if (rate > 0) {\n          if (this.statChangeInterval)\n            clearInterval(this.statChangeInterval);\n          var sc = this.statCounter;\n          this.statChangeInterval = setInterval(function () {\n            //for (var i=0; i<7; i++)\n              sc.increment();\n          }, rate);\n        }\n      }\n    }\n    //setElementHeight();\n\n  }\n\n  removeValueMap(map) {\n    var index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    var index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  link(scope, elem, attrs, ctrl) {    \n    var $panelContainer = elem.find('.panel-container');\n    this.parentElem = elem.find('.grafana-stat-counter');\n    ctrl.setContainer(this.parentElem);\n    this.elem = this.parentElem.find('.grafana-stat-counter-value');\n    //ctrl.setContainer(elem.find('.panel-container'));\n\n    this.render();    \n  }\n\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    var magn = Math.pow(10, -dec),\n      norm = delta / magn, // norm is between 1.0 and 10.0\n      size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) { dec = 0; }\n\n    var result = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n    if (this.series.length > 1) {\n      var error = new Error();\n      error.message = 'Multiple Series Error';\n      error.data = 'Metric query returns ' + this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' + JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      var lastPoint = _.last(this.series[0].datapoints);\n      var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.operatorName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else {\n        data.value = this.series[0].stats[this.panel.operatorName];\n        data.flotpairs = this.series[0].flotpairs;\n        var decimalInfo = this.getDecimalsForValue(data.value);\n        var formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = {\n        __name: {\n          value: this.series[0].label\n        }\n      };\n    }\n\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (var i = 0; i < this.panel.valueMaps.length; i++) {\n        var map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        var value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (var j = 0; j < this.panel.rangeMaps.length; j++) {\n        var rangeMap = this.panel.rangeMaps[j];\n        // special null case\n        if (rangeMap.from === 'null' && rangeMap.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = rangeMap.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        var from = parseFloat(rangeMap.from);\n        var to = parseFloat(rangeMap.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = rangeMap.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = \"no value\";\n    }\n  }\n\n  getValueText() {\n    return this.data.valueFormatted;\n  }\n\n  getValueRounded() {\n    return this.data.valueRounded;\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    var data = {};\n    this.setValues(data);\n    this.data = data;\n    //console.log(\"Data value: \" + data.value + \" formatted: \" + data.valueFormatted + \" rounded: \" + data.valueRounded);\n    //var fmtTxt = kbn.valueFormats[this.panel.format];\n    //console.log(\"Format: \" + fmtTxt);\n    this.render();\n    //this.gaugeObject.updateGauge(data.value, data.valueFormatted, data.valueRounded);\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  invertColorOrder() {\n    var tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n}\n\nfunction getColorForValue(data, value) {\n  for (var i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i - 1]) {\n      return data.colorMap[i];\n    }\n  }\n  return _.first(data.colorMap);\n}\n\nCounterPanelCtrl.templateUrl = 'partials/template.html';\nexport {\n  CounterPanelCtrl,\n  CounterPanelCtrl as MetricsPanelCtrl\n};\n"]}